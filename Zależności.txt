*Żądania funkcji piszemy tak: typ zwracany, nazwa funkcji, argumenty, krótki opis, kto żąda (imię)

1. Zarządzanie pamięcią (Piotr)
	std::shared_ptr getMemoryContent() - zwraca wskaźnik na pierwszy element pamięci (Jędrzej)
	void freeMemoryFromProcess(std::shared_ptr<PCB> process) - zwalnia strony zarezerwowane dla procesu (Mateusz)
	std::shared_ptr<std::vector<uint16_t>> loadProgramIntoMemory(const std::string& filePath) - ładuje program z pliku do pamięci i wektor numerów stron (Mateusz)
	char& getLogicalMemory(unsigned int PC, unsigned int PID) - zwróć referencje na element pamięci o danym adresie logicznym (Marcin)

2. Zarządzanie systemem plików (Kacper)
		

3. Zarządzanie procesami (Mateusz)
	void processSleep() - przełącza proces który wywołał tą funkcję w stan uśpienia; wskaźnik do obecnego procesu mógłby być argumentem, jeżeli ta definicja nie pasuje (Tomek)
	void processWakeUp(std::shared_ptr<PCB> process) - budzi proces do którego podany został wskaźnik (Tomek)
	
4. Zarządzanie procesorem (Maciej)
	void addProcessToScheduler(std::shared_ptr<PCB> process) - dodaje stworzony proces do planisty/scheduler'a  (Mateusz)
	void deleteProcessFromScheduler(std::shared_ptr<PCB> process) - usuwa proces z planisty/scheduler'a (Mateusz)
	std::shared_ptr<PCB> getRunningProcess() - zwraca wskaźnik na obiekt PCB processu który jest aktalnie Running (Marcin, Tomek)
	void go() - wykonuje jeden obrót procesora (jedna instrukcja z procesu, łącznie ze zmianą kontekstu)
	
5. Interpreter assemblera (Marcin)
	void go() - wykonuje jeden rozkaz assemblerowy, czytany z PCB procesu running (Jędrzej)
	Maciej:
	{
		void schedule() //sprawdza czy czas aktaulnie aktywnego procesu minął, jeśli tak to wchodzi inny do RUNNING;
		void endActualProcess() //usówa proces aktualnie w RUNNING, wywołaj tą metodę kiedy proces się kończy
		
	}
		

6. Pamięć wirtualna (Michał)

7. Semaphore (Tomek)


8. Shell (Jędrzej)


Nazwy klas:
- Memory
- FileSystem
- ProcessManager
- Scheduler
- Interpreter
- VirtualMemory
- Semaphore
- Shell
